//QUESTION

//Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.

//The overall run time complexity should be O(log (m+n)). 

//Example 1:

//Input: nums1 = [1,3], nums2 = [2]
//Output: 2.00000
//Explanation: merged array = [1,2,3] and median is 2.
//Example 2:

//Input: nums1 = [1,2], nums2 = [3,4]
//Output: 2.50000
//Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.
//Example 3:

//Input: nums1 = [0,0], nums2 = [0,0]
//Output: 0.00000
//Example 4:

//Input: nums1 = [], nums2 = [1]
//Output: 1.00000
//Example 5:

//Input: nums1 = [2], nums2 = []
//Output: 2.00000
 

//Constraints:

//nums1.length == m
//nums2.length == n
//0 <= m <= 1000
//0 <= n <= 1000
//1 <= m + n <= 2000
//-106 <= nums1[i], nums2[i] <= 106



//ANSWER

import java.util.Arrays;
class Solution 
{
    public double findMedianSortedArrays(int[] nums1, int[] nums2) 
    {
        int l1=nums1.length;
        int l2=nums2.length;
        int nums[]=new int[l1+l2];
        int l=nums.length,x=0,y=0,count=0;
        for(x=0;x<l1;x++)
        {
            nums[x]=nums1[x];
            count++;
        }
        for(y=0;y<l2;y++)
        {
            nums[count]=nums2[y];
            count++;
        }
        Arrays.sort(nums);
        int c=0,s=0;
        double output=0.0;
        if(l%2==0)
        {
            c=l/2;
            s=nums[c]+nums[c-1];
            output=s/2.0;
            
        }
        else
        {
            output=nums[((l+1)/2)-1];
        }
        return output;
    }
}
