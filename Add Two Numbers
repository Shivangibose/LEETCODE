//QUESTION

//You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

//You may assume the two numbers do not contain any leading zero, except the number 0 itself.

//Example 1:

//Input: l1 = [2,4,3], l2 = [5,6,4]
//Output: [7,0,8]
//Explanation: 342 + 465 = 807.

//Example 2:

//Input: l1 = [0], l2 = [0]
//Output: [0]

//Example 3:

//Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
//Output: [8,9,9,9,0,0,0,1]
 

//Constraints:

//The number of nodes in each linked list is in the range [1, 100].
//0 <= Node.val <= 9
//It is guaranteed that the list represents a number that does not have leading zeros.



//ANSWER

class Solution 
{
     public ListNode reverse(ListNode head)
     {
        ListNode prev=null;
        while(head!=null)
        {
            ListNode next=head.next;
            head.next=prev;
            prev=head;
            head=next;
        }
        return prev;
    }

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) 
    {
        ListNode l=null;
        int carry=0,sum=0,rem=0;
        for(int x=0;l1!=null || l2!=null;)
        {
            if(l1==null && l2!=null)
            {
                
                
                    sum=l2.val+carry;
                    carry=sum/10;
                    l=new ListNode(sum%10,l);
                   l2=l2.next;
               
                
            }
            if(l2==null && l1!=null)
            {
                
                
                    sum=l1.val+carry;
                    carry=sum/10;
                    l=new ListNode(sum%10,l);
                    l1=l1.next;
             
            }
            if(l1!=null && l2!=null)
            {
               
                    sum=l1.val+l2.val+carry;
                    carry=sum/10;
                    l=new ListNode(sum%10,l);
                   l1=l1.next;
                   l2=l2.next;
            }
           
            x++;
        }
        if(carry>0)
            {
            l=new ListNode(carry,l);
        } 
        return reverse(l);
    }
}
